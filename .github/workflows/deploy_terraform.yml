name: Deploy DNA-Lang Live Ecosystem

on:
  push:
    branches: [ main ]
    paths:
      - 'backend/**'
      - 'frontend/**'
      - 'main.tf'
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: |
            backend/package-lock.json
            frontend/package-lock.json

      - name: Install backend dependencies
        run: |
          cd backend
          npm ci

      - name: Install frontend dependencies
        run: |
          cd frontend
          npm ci

      - name: Run backend tests
        run: |
          cd backend
          npm test

      - name: Build frontend
        run: |
          cd frontend
          npm run build

  deploy-infrastructure:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
      - uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.4.6

      - name: Configure GCP credentials
        env:
          GOOGLE_CREDENTIALS: ${{ secrets.GCP_SA_KEY }}
        run: |
          echo "$GOOGLE_CREDENTIALS" > /tmp/gcp-key.json
          export GOOGLE_APPLICATION_CREDENTIALS=/tmp/gcp-key.json

      - name: Terraform Init
        run: |
          cd backend
          terraform init

      - name: Terraform Plan
        run: |
          cd backend
          terraform plan -out=tfplan

      - name: Terraform Apply
        run: |
          cd backend
          terraform apply -auto-approve tfplan

  deploy-backend:
    needs: [test, deploy-infrastructure]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install backend dependencies
        run: |
          cd backend
          npm ci --production

      - name: Configure GCP credentials
        env:
          GOOGLE_CREDENTIALS: ${{ secrets.GCP_SA_KEY }}
        run: |
          echo "$GOOGLE_CREDENTIALS" > /tmp/gcp-key.json
          export GOOGLE_APPLICATION_CREDENTIALS=/tmp/gcp-key.json

      - name: Deploy to Cloud Run
        run: |
          gcloud auth activate-service-account --key-file=/tmp/gcp-key.json
          gcloud config set project ${{ secrets.GOOGLE_PROJECT_ID }}
          
          # Build and deploy backend
          cd backend
          gcloud builds submit --tag gcr.io/${{ secrets.GOOGLE_PROJECT_ID }}/dna-lang-backend
          gcloud run deploy dna-lang-backend \
            --image gcr.io/${{ secrets.GOOGLE_PROJECT_ID }}/dna-lang-backend \
            --platform managed \
            --region us-central1 \
            --allow-unauthenticated \
            --port 8081 \
            --memory 1Gi \
            --cpu 1 \
            --min-instances 1 \
            --max-instances 10

  deploy-frontend:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install frontend dependencies
        run: |
          cd frontend
          npm ci

      - name: Build frontend
        env:
          REACT_APP_BACKEND_URL: ${{ secrets.BACKEND_URL }}
          REACT_APP_WEBSOCKET_PORT: ${{ secrets.WEBSOCKET_PORT }}
        run: |
          cd frontend
          npm run build

      - name: Deploy to Vercel
        uses: amondnet/vercel-action@v20
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          working-directory: ./frontend

  notify:
    needs: [deploy-infrastructure, deploy-backend, deploy-frontend]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
      - name: Notify deployment status
        run: |
          echo "üöÄ DNA-Lang Live Digital Ecosystem deployment completed!"
          echo "üìä Frontend: Deployed to Vercel"
          echo "üß¨ Backend: Deployed to Cloud Run"
          echo "‚òÅÔ∏è Infrastructure: Provisioned via Terraform"